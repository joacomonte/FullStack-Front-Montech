{"ast":null,"code":"var _jsxFileName = \"/Users/monte/Dev/udpateFrontMontech/FullStack-Front-Montech/client/src/components/Weather.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AsyncPaginate } from 'react-select-async-paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoApiOptions = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '68fe517f74msh39a3ac3397d753ap1acac7jsn1f9381ec7d88',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n  }\n};\nconst geoApiUrl = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\nconst openWeatherApiUrl = 'https://api.openweathermap.org/data/2.5';\nconst openWeatherApiKey = 'd367692ec061efede6349a8069ea8b1f';\nconst colourStyles = {\n  option: (provided, state) => ({ ...provided,\n    borderBottom: '1px dotted light grey',\n    color: state.isFocused ? 'black' : 'white',\n    padding: 20,\n    backgroundColor: state.isFocused ? 'white' : 'rgba(28, 28, 28, 0.954)'\n  }),\n  menuList: provided => ({ ...provided,\n    backgroundColor: 'rgba(28, 28, 28, 0.954)'\n  })\n};\n\nconst Weather = () => {\n  _s();\n\n  //from inputed value -> fetch -> return object {options: {value:,label:}}\n  const cityOptionsFunction = inputValue => {\n    return fetch(`${geoApiUrl}/cities?minPopulation=100000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude},${city.longitude}`,\n            label: `${city.name}, ${city.region}, ${city.country} `\n          };\n        })\n      };\n    }).catch(err => console.error(err));\n  };\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [search, setSearch] = useState(null); //gets the \"object city\" from \"cityOptionsFunction\" and fetchs with its values\n\n  const citySelectedFunction = citySelected => {\n    setSearch(citySelected);\n    const [lat, lon] = citySelected.value.split(\",\");\n    fetch(`${openWeatherApiUrl}/weather?lat=${lat}&lon=${lon}&appid=${openWeatherApiKey}&units=metric`).then(res => res.json()).then(json => {\n      setCurrentWeather({\n        city: citySelected.label,\n        ...json\n      });\n    }).catch(err => console.log(err));\n  }; // \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-title\",\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Temperatura en \", currentWeather ? currentWeather.city.split(',')[0] : \"algun lugar del mundo es de 20ยบ\", \": \", currentWeather && Math.round(currentWeather.main.temp) + 'ยบ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-Searcher\",\n      children: /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n        placeholder: \"Buscar por ciudad\",\n        debounceTimeout: 1200 // delay to fetch\n        ,\n        value: search // to print letters\n        ,\n        loadOptions: cityOptionsFunction // to fetch the objects cities\n        ,\n        onChange: citySelectedFunction // cityObject selected\n        ,\n        styles: colourStyles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Weather, \"3tiUDG+uItsNk/EWTTJMqpBbAf8=\");\n\n_c = Weather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","method","headers","geoApiUrl","openWeatherApiUrl","openWeatherApiKey","colourStyles","option","provided","state","borderBottom","color","isFocused","padding","backgroundColor","menuList","Weather","cityOptionsFunction","inputValue","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","region","country","catch","err","console","error","currentWeather","setCurrentWeather","search","setSearch","citySelectedFunction","citySelected","lat","lon","split","res","log","Math","round","main","temp"],"sources":["/Users/monte/Dev/udpateFrontMontech/FullStack-Front-Montech/client/src/components/Weather.js"],"sourcesContent":["import React, { useState} from 'react'\nimport { AsyncPaginate } from 'react-select-async-paginate'\n\n\nconst geoApiOptions = \n{\n    method: 'GET',\n    headers: {\n        'X-RapidAPI-Key': '68fe517f74msh39a3ac3397d753ap1acac7jsn1f9381ec7d88',\n        'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com'\n    }\n};\nconst geoApiUrl = 'https://wft-geo-db.p.rapidapi.com/v1/geo'\n\n\nconst openWeatherApiUrl = 'https://api.openweathermap.org/data/2.5'\n\nconst openWeatherApiKey = 'd367692ec061efede6349a8069ea8b1f'\n\n\n\n\n\nconst colourStyles = {\n  option: (provided, state) => ({\n    ...provided,\n    borderBottom: '1px dotted light grey',\n    color: state.isFocused ? 'black' : 'white',\n    padding: 20,\n    backgroundColor: state.isFocused? 'white':'rgba(28, 28, 28, 0.954)',\n  }),\n    menuList: (provided) => ({\n    ...provided,\n    backgroundColor: 'rgba(28, 28, 28, 0.954)',\n\n  }),\n};\n\n\n\n\n\n\n\nconst Weather = ()  => {\n\n  //from inputed value -> fetch -> return object {options: {value:,label:}}\n  const cityOptionsFunction = (inputValue) => {\n    return fetch(`${geoApiUrl}/cities?minPopulation=100000&namePrefix=${inputValue}`, geoApiOptions)\n        .then(response => response.json())\n        .then(response => {\n          return{\n            options: response.data.map((city)=> {\n              return{              \n                value: `${city.latitude},${city.longitude}`,\n                label: `${city.name}, ${city.region}, ${city.country} `\n              }\n            })\n          }\n        })\n      .catch((err) => console.error(err));\n  }\n\n  const [currentWeather, setCurrentWeather] = useState(null);\n\n  const[search, setSearch] = useState(null);\n\n\n  //gets the \"object city\" from \"cityOptionsFunction\" and fetchs with its values\n  const citySelectedFunction = (citySelected) =>{\n    setSearch(citySelected);\n\n\n    const [lat, lon] = citySelected.value.split(\",\");\n\n    fetch(`${openWeatherApiUrl}/weather?lat=${lat}&lon=${lon}&appid=${openWeatherApiKey}&units=metric`)\n      .then(res => res.json())\n      .then(json => {\n        setCurrentWeather({city: citySelected.label, ...json});\n      })\n      .catch((err) => console.log(err) );\n  }\n\n\n// \n\n\n  return(\n\n    <div className=\"forecast-container\">\n\n      <div className=\"forecast-title\">\n        <h4>Temperatura en {currentWeather ? currentWeather.city.split(',')[0] : \"algun lugar del mundo es de 20ยบ\"}: {currentWeather && Math.round(currentWeather.main.temp)+'ยบ'}</h4>\n      </div>\n\n        <div className=\"forecast-Searcher\">\n          <AsyncPaginate \n            placeholder=\"Buscar por ciudad\"\n            debounceTimeout={1200} // delay to fetch\n            value={search} // to print letters\n            loadOptions={cityOptionsFunction} // to fetch the objects cities\n            onChange={citySelectedFunction} // cityObject selected\n            styles={colourStyles}\n          />\n        </div>\n        \n    </div>\n)}\n\n\nexport default Weather;"],"mappings":"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"},"metadata":{},"sourceType":"module"}